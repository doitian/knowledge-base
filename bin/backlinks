#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import os
import sys
import subprocess
import shutil
from urllib.parse import unquote
from pathlib import Path


def title(path):
    for line in open(path, "r"):
        if line.startswith('# '):
            return line[2:].strip()
    return Path(path).stem.replace('♯ ', '')


if len(sys.argv) < 2:
    sys.exit(-1)

target = Path(sys.argv[1])
basename = target.name
if basename.endswith('.md'):
    basename = basename[:-3]

pattern = r'^[^➫]*\[\[(.*/)?{}(\.md)?(\|.*)?\]\]'.format(
    re.escape(basename)).replace('\\ ', ' ')

if shutil.which('rg') is not None or shutil.which('rg.exe') is not None:
    status = subprocess.run(['rg', '-l', '-e', pattern],
                            stdin=subprocess.DEVNULL, capture_output=True, encoding='utf-8')
    files = status.stdout.replace('\\', '/').splitlines()
else:
    pattern = re.compile(pattern, re.M)
    files = []
    for root, dirs, entries in os.walk(os.getcwd()):
        if '.git' in dirs:
            dirs.remove('.git')

        root = Path(root)

        for e in entries:
            if e.endswith('.md'):
                with open(root / e) as fin:
                    for line in fin.readlines():
                        if pattern.search(line) is not None:
                            files.append(str(root / e).replace('\\', '/'))
                            break

if len(files) > 0:
    references = 'reference' if len(files) == 1 else 'references'

    print('## {} linked {} to "{}"\n'.format(
        len(files), references, title(target)
    ))

    for file in files:
        basename = file.split('/')[-1]
        if basename.endswith('.md'):
            basename = basename[:-3]
        file_title = title(file)
        if '♯ ' + file_title == basename:
          print('* ➫ [[{}]]'.format(basename))
        else:
          print('* ➫ [[{}|{}]]'.format(basename, file_title))

else:
    print("Not references found")
